#!/usr/bin/env python3
"""
Script de inicializaci√≥n para configurar el sistema administrativo
"""
from app import app, db
from models import User, Subscription, TradingConfig
from admin_manager import setup_initial_admin
import logging

def initialize_system():
    """Inicializar el sistema con configuraci√≥n b√°sica"""
    print("üöÄ Inicializando sistema de administraci√≥n...")
    
    with app.app_context():
        try:
            # Crear usuario administrador demo
            demo_user_id = '1'
            user = User.query.get(demo_user_id)
            
            if not user:
                print("üìù Creando usuario administrador...")
                user = User()
                user.id = demo_user_id
                user.email = "admin@trading-bot.com"
                user.first_name = "Super"
                user.last_name = "Admin"
                user.is_admin = True
                user.role = 'SUPER_ADMIN'
                db.session.add(user)
                db.session.commit()
                print("‚úÖ Usuario administrador creado")
            else:
                # Asegurar que sea administrador
                user.is_admin = True
                user.role = 'SUPER_ADMIN'
                db.session.commit()
                print("‚úÖ Usuario existente actualizado como administrador")
            
            # Configurar acceso ilimitado
            success, message = setup_initial_admin(demo_user_id)
            if success:
                print(f"‚úÖ {message}")
            else:
                print(f"‚ö†Ô∏è {message}")
            
            # Configuraci√≥n b√°sica del sistema
            configs = [
                ('TELEGRAM_BOT_TOKEN', ''),
                ('TELEGRAM_CHAT_ID', ''),
                ('TRADING_ENABLED', 'false'),
                ('MAX_TRADE_AMOUNT', '30.0'),
                ('RISK_LEVEL', 'LOW'),
                ('ALERT_THRESHOLD_ARBITRAGE', '2.0'),
                ('ALERT_THRESHOLD_PUMP', '15.0'),
                ('ALERT_THRESHOLD_VOLUME', '300.0'),
                ('DEMO_MODE', 'true')
            ]
            
            for key, default_value in configs:
                existing = TradingConfig.query.filter_by(key=key).first()
                if not existing:
                    config = TradingConfig(key=key, value=default_value)
                    db.session.add(config)
            
            db.session.commit()
            print("‚úÖ Configuraci√≥n b√°sica del sistema completada")
            
            # Mostrar informaci√≥n del administrador
            print("\n" + "="*50)
            print("üéØ SISTEMA CONFIGURADO CORRECTAMENTE")
            print("="*50)
            print(f"üë§ Usuario Administrador: {user.email}")
            print(f"üîë ID de Usuario: {user.id}")
            print(f"üëë Rol: {user.role}")
            print(f"‚ú® Acceso: Completo e Ilimitado")
            print("\nüìã Funciones disponibles:")
            print("   ‚Ä¢ Gestionar usuarios y licencias")
            print("   ‚Ä¢ Crear c√≥digos de referido")
            print("   ‚Ä¢ Acceso a todas las funciones premium")
            print("   ‚Ä¢ Panel de administraci√≥n completo")
            print("\nüåê URLs importantes:")
            print("   ‚Ä¢ Dashboard: http://localhost:5000/")
            print("   ‚Ä¢ Panel Admin: http://localhost:5000/admin")
            print("   ‚Ä¢ Planes: http://localhost:5000/subscription")
            print("="*50)
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error durante la inicializaci√≥n: {str(e)}")
            logging.error(f"Init error: {e}")
            return False

if __name__ == "__main__":
    print("üîß Iniciando configuraci√≥n del sistema...")
    success = initialize_system()
    if success:
        print("üéâ ¬°Sistema listo para usar!")
    else:
        print("üí• Error en la configuraci√≥n del sistema")